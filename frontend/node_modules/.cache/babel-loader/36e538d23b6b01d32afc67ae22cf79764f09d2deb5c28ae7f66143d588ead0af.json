{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{useSelector,useDispatch}from'react-redux';import{setCredentials,clearCredentials}from'../store/slices/authSlice';import authService from'../services/authService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const dispatch=useDispatch();const{user,token,isAuthenticated}=useSelector(state=>state.auth);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{const initializeAuth=async()=>{const token=localStorage.getItem('token');if(token){try{const response=await authService.getCurrentUser();dispatch(setCredentials({user:response.data,token}));}catch(error){localStorage.removeItem('token');dispatch(clearCredentials());}}setIsLoading(false);};initializeAuth();},[dispatch]);const login=async credentials=>{try{const response=await authService.login(credentials);dispatch(setCredentials(response.data));return{success:true};}catch(error){var _error$response,_error$response$data;return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed'};}};const register=async userData=>{try{const response=await authService.register(userData);dispatch(setCredentials(response.data));return{success:true};}catch(error){var _error$response2,_error$response2$data;return{success:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed'};}};const logout=async()=>{try{await authService.logout();}catch(error){console.error('Logout error:',error);}finally{dispatch(clearCredentials());}};const value={user,token,isAuthenticated,isLoading,login,register,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useSelector","useDispatch","setCredentials","clearCredentials","authService","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","dispatch","user","token","isAuthenticated","state","auth","isLoading","setIsLoading","initializeAuth","localStorage","getItem","response","getCurrentUser","data","error","removeItem","login","credentials","success","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","logout","console","value","Provider"],"sources":["/workspace/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCredentials, clearCredentials } from '../store/slices/authSlice';\nimport authService from '../services/authService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const dispatch = useDispatch();\n  const { user, token, isAuthenticated } = useSelector((state) => state.auth);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await authService.getCurrentUser();\n          dispatch(setCredentials({ user: response.data, token }));\n        } catch (error) {\n          localStorage.removeItem('token');\n          dispatch(clearCredentials());\n        }\n      }\n      setIsLoading(false);\n    };\n\n    initializeAuth();\n  }, [dispatch]);\n\n  const login = async (credentials) => {\n    try {\n      const response = await authService.login(credentials);\n      dispatch(setCredentials(response.data));\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.message || 'Login failed' \n      };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const response = await authService.register(userData);\n      dispatch(setCredentials(response.data));\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.message || 'Registration failed' \n      };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      dispatch(clearCredentials());\n    }\n  };\n\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}