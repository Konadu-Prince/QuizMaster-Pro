{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nconst quizService = {\n  getQuizzes: async (params = {}) => {\n    const response = await api.get('/quizzes', {\n      params\n    });\n    return response;\n  },\n  getQuizById: async id => {\n    const response = await api.get(`/quizzes/${id}`);\n    return response;\n  },\n  createQuiz: async quizData => {\n    const response = await api.post('/quizzes', quizData);\n    return response;\n  },\n  updateQuiz: async (id, quizData) => {\n    const response = await api.put(`/quizzes/${id}`, quizData);\n    return response;\n  },\n  deleteQuiz: async id => {\n    const response = await api.delete(`/quizzes/${id}`);\n    return response;\n  },\n  submitQuiz: async (quizId, answers) => {\n    const response = await api.post(`/quizzes/${quizId}/submit`, {\n      answers\n    });\n    return response;\n  },\n  getQuizResults: async (quizId, attemptId) => {\n    const response = await api.get(`/quizzes/${quizId}/results/${attemptId}`);\n    return response;\n  },\n  getUserQuizzes: async (params = {}) => {\n    const response = await api.get('/quizzes/my', {\n      params\n    });\n    return response;\n  },\n  getQuizAttempts: async quizId => {\n    const response = await api.get(`/quizzes/${quizId}/attempts`);\n    return response;\n  }\n};\nexport default quizService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","quizService","getQuizzes","params","response","get","getQuizById","id","createQuiz","quizData","post","updateQuiz","put","deleteQuiz","delete","submitQuiz","quizId","answers","getQuizResults","attemptId","getUserQuizzes","getQuizAttempts"],"sources":["/home/konaduprince26/Downloads/QuizMaster-Pro/frontend/src/services/quizService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nconst quizService = {\n  getQuizzes: async (params = {}) => {\n    const response = await api.get('/quizzes', { params });\n    return response;\n  },\n\n  getQuizById: async (id) => {\n    const response = await api.get(`/quizzes/${id}`);\n    return response;\n  },\n\n  createQuiz: async (quizData) => {\n    const response = await api.post('/quizzes', quizData);\n    return response;\n  },\n\n  updateQuiz: async (id, quizData) => {\n    const response = await api.put(`/quizzes/${id}`, quizData);\n    return response;\n  },\n\n  deleteQuiz: async (id) => {\n    const response = await api.delete(`/quizzes/${id}`);\n    return response;\n  },\n\n  submitQuiz: async (quizId, answers) => {\n    const response = await api.post(`/quizzes/${quizId}/submit`, { answers });\n    return response;\n  },\n\n  getQuizResults: async (quizId, attemptId) => {\n    const response = await api.get(`/quizzes/${quizId}/results/${attemptId}`);\n    return response;\n  },\n\n  getUserQuizzes: async (params = {}) => {\n    const response = await api.get('/quizzes/my', { params });\n    return response;\n  },\n\n  getQuizAttempts: async (quizId) => {\n    const response = await api.get(`/quizzes/${quizId}/attempts`);\n    return response;\n  },\n};\n\nexport default quizService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,MAAMG,WAAW,GAAG;EAClBC,UAAU,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IACjC,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,GAAG,CAAC,UAAU,EAAE;MAAEF;IAAO,CAAC,CAAC;IACtD,OAAOC,QAAQ;EACjB,CAAC;EAEDE,WAAW,EAAE,MAAOC,EAAE,IAAK;IACzB,MAAMH,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,GAAG,CAAC,YAAYE,EAAE,EAAE,CAAC;IAChD,OAAOH,QAAQ;EACjB,CAAC;EAEDI,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,MAAML,QAAQ,GAAG,MAAMlB,GAAG,CAACwB,IAAI,CAAC,UAAU,EAAED,QAAQ,CAAC;IACrD,OAAOL,QAAQ;EACjB,CAAC;EAEDO,UAAU,EAAE,MAAAA,CAAOJ,EAAE,EAAEE,QAAQ,KAAK;IAClC,MAAML,QAAQ,GAAG,MAAMlB,GAAG,CAAC0B,GAAG,CAAC,YAAYL,EAAE,EAAE,EAAEE,QAAQ,CAAC;IAC1D,OAAOL,QAAQ;EACjB,CAAC;EAEDS,UAAU,EAAE,MAAON,EAAE,IAAK;IACxB,MAAMH,QAAQ,GAAG,MAAMlB,GAAG,CAAC4B,MAAM,CAAC,YAAYP,EAAE,EAAE,CAAC;IACnD,OAAOH,QAAQ;EACjB,CAAC;EAEDW,UAAU,EAAE,MAAAA,CAAOC,MAAM,EAAEC,OAAO,KAAK;IACrC,MAAMb,QAAQ,GAAG,MAAMlB,GAAG,CAACwB,IAAI,CAAC,YAAYM,MAAM,SAAS,EAAE;MAAEC;IAAQ,CAAC,CAAC;IACzE,OAAOb,QAAQ;EACjB,CAAC;EAEDc,cAAc,EAAE,MAAAA,CAAOF,MAAM,EAAEG,SAAS,KAAK;IAC3C,MAAMf,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,GAAG,CAAC,YAAYW,MAAM,YAAYG,SAAS,EAAE,CAAC;IACzE,OAAOf,QAAQ;EACjB,CAAC;EAEDgB,cAAc,EAAE,MAAAA,CAAOjB,MAAM,GAAG,CAAC,CAAC,KAAK;IACrC,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,GAAG,CAAC,aAAa,EAAE;MAAEF;IAAO,CAAC,CAAC;IACzD,OAAOC,QAAQ;EACjB,CAAC;EAEDiB,eAAe,EAAE,MAAOL,MAAM,IAAK;IACjC,MAAMZ,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,GAAG,CAAC,YAAYW,MAAM,WAAW,CAAC;IAC7D,OAAOZ,QAAQ;EACjB;AACF,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}